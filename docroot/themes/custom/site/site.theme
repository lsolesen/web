<?php

/**
 * @file
 * Functions to support theming in the site theme.
 */


/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function site_preprocess_html(array &$variables) {
// $variables['attributes']['class'][] = 'navigation-bar-enabled-xs';
// $variables['attributes']['class'][] = 'sidebar-left-enabled-xs';
// $variables['attributes']['class'][] = 'sidebar-left-hidden-xs';
// $variables['attributes']['class'][] = 'sidebar-left-content-push-xs';
}



/**
 * Implements hook_page_attachments_alter().
 */
function site_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function site_preprocess_page(array &$variables) {
  
  $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
  if ($tid) {
    $variables['term'] = \Drupal\taxonomy\Entity\Term::load($tid);
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function site_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    if ($node->getType()) {
      $suggestions[] = 'page__' . $node->getType();
    }

    if($node->hasField('field_page_template')){
    $custom_page_template = $node->get('field_page_template')->getValue();
      if(isset($custom_page_template[0]['target_id'])){
        $term = \Drupal\taxonomy\Entity\Term::load($custom_page_template[0]['target_id'])->getname();
        $term = 'page__' . preg_replace("/[^a-zA-Z0-9s]/", "_", strtolower($term));
        $suggestions[] = $term;
      }
    }

    //alternative front page template suggestion, which has higher priority than page__node-type
    $is_front = \Drupal::service('path.matcher')->isFrontPage();
    if($is_front == TRUE)  {
      $suggestions[] = 'page__' . $node->getType() . '__front';
    }
  }

  $term = \Drupal::request()->attributes->get('taxonomy_term');
  if ($term) {
    if ($term->getVocabularyId()) {
      $suggestions[] = 'page__taxonomy__term__' . $term->getVocabularyId();
    }
  }

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function site_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

function site_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables, $hook) {
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#taxonomy_term']->getVocabularyId() . '__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'taxonomy_term__' . $variables['elements']['#view_mode'];
}


function site_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function site_preprocess_block(array &$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function site_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];
  $suggestions[] = 'field__' . $element['#entity_type'] . '__' . $element['#view_mode'] . '__' . $element['#field_name'];
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function site_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function site_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);

    // menu__MENU_NAME__BLOCK_NAME
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function site_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function site_theme_suggestions_file_link_alter(&$suggestions, $vars, $hook) {

  $suggestions[] = 'file_link__' . 'type__' . 'page';

}

/**
 * Implements hook_preprocess_node().
 */
function site_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;

  $node = $variables['node'];

  if ($node->getType() == 'vih_long_cource') {
    //preloading travel classes
    foreach ($node->field_vih_course_periods->referencedEntities() as $period) {
      foreach($period->field_vih_cp_course_slots->referencedEntities() as $slot) {
        $travel = array_pop($slot->field_vih_cs_travel->getValue()[0]);

        foreach ($slot->field_vih_cs_classes->referencedEntities() as $class) {
          foreach ($class->field_vih_class_class_packages->referencedEntities() as $class_package) {
            if (!isset($variables['content']['classes_packages']) || empty($variables['content']['classes_packages'][$class_package->id()])) {
              $variables['content']['classes_packages'][$class_package->id()] = array (
                'name' => $class_package->getName(),
                'term' => \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term')->view($class_package, 'vih_class_package_accordion'),
              );
              $variables['content']['classes_packages'][$class_package->id()]['term']['#background_image'] = $class_package->field_vih_cp_image->entity->url();
            }

            $variables['content']['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['name'] = array_pop($slot->field_vih_cs_title->getValue()[0]);
            $variables['content']['classes_packages'][$class_package->id()]['term']['#slots'][$slot->id()]['classes'][$class->id()] =
              \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term')->view($class, 'vih_class_table_teaser');
          }

          if ($travel) {
            $variables['content']['travel_classes'][] = \Drupal::entityTypeManager()->getViewBuilder('taxonomy_term')->view($class, 'teaser');
          }
        }
      }
    }
  }
}

/*
 * Implements hook_preprocess_paragraph().
 */
function site_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];

  // Background image
  if ($paragraph->field_background_image && !$paragraph->field_background_image->isEmpty()) {
    $image = $paragraph->field_background_image->entity->url();

    $variables['attributes']['class'][] = 'angled-background-image';
    $variables['background_image'] = $image;
  }

  // No background images has been set, so we can try to set a background color
  else {

    // Background color
    if ($paragraph->field_background_image && !$paragraph->field_background_color->isEmpty()) {
      $background_color = $paragraph->field_background_color->getValue();
      $variables['attributes']['class'][] = 'angled-background-color';
      $variables['attributes']['class'][] = 'angled-background-color-' . $background_color[0]['value'];
    }
  }
}

function site_preprocess_paragraph__list_of_news_teasers(&$variables) {
  $variables['embedded_view'] = views_embed_view('news', 'embedded_teaser_list');
}

function site_preprocess_paragraph__class_packages(&$variables) {
  $variables['content'] = views_embed_view('class_packages_frontpage', 'block_1');
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function site_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function site_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function site_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function site_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function site_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function site_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function site_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}

function site_preprocess_links__language_block(&$variables) {
  $variables['links']['en']['link']['#title'] = 'En';
  $variables['links']['da']['link']['#title'] = 'Da';
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function site_preprocess_taxonomy_term(&$variables) {
  $variables['attributes']['class'][] = $variables['view_mode'];
  $variables['attributes']['class'][] = $variables['term']->getVocabularyId();
}

/**
 * Implements template_preprocess_user().
 */
function site_preprocess_user(&$variables) {
  //kint($variables['elements']['#view_mode']);
  $variables['attributes']['class'][] = 'user';
  $variables['attributes']['class'][] = $variables['elements']['#view_mode'];
}